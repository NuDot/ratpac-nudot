// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ratchromadata.proto

#ifndef PROTOBUF_ratchromadata_2eproto__INCLUDED
#define PROTOBUF_ratchromadata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ratchroma {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ratchromadata_2eproto();
void protobuf_AssignDesc_ratchromadata_2eproto();
void protobuf_ShutdownFile_ratchromadata_2eproto();

class CherenkovData;
class ScintStep;
class ChromaData;

// ===================================================================

class CherenkovData : public ::google::protobuf::Message {
 public:
  CherenkovData();
  virtual ~CherenkovData();

  CherenkovData(const CherenkovData& from);

  inline CherenkovData& operator=(const CherenkovData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CherenkovData& default_instance();

  void Swap(CherenkovData* other);

  // implements Message ----------------------------------------------

  inline CherenkovData* New() const { return New(NULL); }

  CherenkovData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CherenkovData& from);
  void MergeFrom(const CherenkovData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CherenkovData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 nphotons = 1;
  void clear_nphotons();
  static const int kNphotonsFieldNumber = 1;
  ::google::protobuf::int32 nphotons() const;
  void set_nphotons(::google::protobuf::int32 value);

  // repeated float x = 2;
  int x_size() const;
  void clear_x();
  static const int kXFieldNumber = 2;
  float x(int index) const;
  void set_x(int index, float value);
  void add_x(float value);
  const ::google::protobuf::RepeatedField< float >&
      x() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_x();

  // repeated float y = 3;
  int y_size() const;
  void clear_y();
  static const int kYFieldNumber = 3;
  float y(int index) const;
  void set_y(int index, float value);
  void add_y(float value);
  const ::google::protobuf::RepeatedField< float >&
      y() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_y();

  // repeated float z = 4;
  int z_size() const;
  void clear_z();
  static const int kZFieldNumber = 4;
  float z(int index) const;
  void set_z(int index, float value);
  void add_z(float value);
  const ::google::protobuf::RepeatedField< float >&
      z() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_z();

  // repeated float t = 5;
  int t_size() const;
  void clear_t();
  static const int kTFieldNumber = 5;
  float t(int index) const;
  void set_t(int index, float value);
  void add_t(float value);
  const ::google::protobuf::RepeatedField< float >&
      t() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_t();

  // repeated float dx = 6;
  int dx_size() const;
  void clear_dx();
  static const int kDxFieldNumber = 6;
  float dx(int index) const;
  void set_dx(int index, float value);
  void add_dx(float value);
  const ::google::protobuf::RepeatedField< float >&
      dx() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_dx();

  // repeated float dy = 7;
  int dy_size() const;
  void clear_dy();
  static const int kDyFieldNumber = 7;
  float dy(int index) const;
  void set_dy(int index, float value);
  void add_dy(float value);
  const ::google::protobuf::RepeatedField< float >&
      dy() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_dy();

  // repeated float dz = 8;
  int dz_size() const;
  void clear_dz();
  static const int kDzFieldNumber = 8;
  float dz(int index) const;
  void set_dz(int index, float value);
  void add_dz(float value);
  const ::google::protobuf::RepeatedField< float >&
      dz() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_dz();

  // repeated float wavelength = 9;
  int wavelength_size() const;
  void clear_wavelength();
  static const int kWavelengthFieldNumber = 9;
  float wavelength(int index) const;
  void set_wavelength(int index, float value);
  void add_wavelength(float value);
  const ::google::protobuf::RepeatedField< float >&
      wavelength() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_wavelength();

  // repeated float px = 10;
  int px_size() const;
  void clear_px();
  static const int kPxFieldNumber = 10;
  float px(int index) const;
  void set_px(int index, float value);
  void add_px(float value);
  const ::google::protobuf::RepeatedField< float >&
      px() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_px();

  // repeated float py = 11;
  int py_size() const;
  void clear_py();
  static const int kPyFieldNumber = 11;
  float py(int index) const;
  void set_py(int index, float value);
  void add_py(float value);
  const ::google::protobuf::RepeatedField< float >&
      py() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_py();

  // repeated float pz = 12;
  int pz_size() const;
  void clear_pz();
  static const int kPzFieldNumber = 12;
  float pz(int index) const;
  void set_pz(int index, float value);
  void add_pz(float value);
  const ::google::protobuf::RepeatedField< float >&
      pz() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_pz();

  // @@protoc_insertion_point(class_scope:ratchroma.CherenkovData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< float > x_;
  mutable int _x_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > y_;
  mutable int _y_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > z_;
  mutable int _z_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > t_;
  mutable int _t_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > dx_;
  mutable int _dx_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > dy_;
  mutable int _dy_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > dz_;
  mutable int _dz_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > wavelength_;
  mutable int _wavelength_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > px_;
  mutable int _px_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > py_;
  mutable int _py_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > pz_;
  mutable int _pz_cached_byte_size_;
  ::google::protobuf::int32 nphotons_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ratchromadata_2eproto();
  friend void protobuf_AssignDesc_ratchromadata_2eproto();
  friend void protobuf_ShutdownFile_ratchromadata_2eproto();

  void InitAsDefaultInstance();
  static CherenkovData* default_instance_;
};
// -------------------------------------------------------------------

class ScintStep : public ::google::protobuf::Message {
 public:
  ScintStep();
  virtual ~ScintStep();

  ScintStep(const ScintStep& from);

  inline ScintStep& operator=(const ScintStep& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScintStep& default_instance();

  void Swap(ScintStep* other);

  // implements Message ----------------------------------------------

  inline ScintStep* New() const { return New(NULL); }

  ScintStep* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScintStep& from);
  void MergeFrom(const ScintStep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScintStep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 nphotons = 1;
  void clear_nphotons();
  static const int kNphotonsFieldNumber = 1;
  ::google::protobuf::int32 nphotons() const;
  void set_nphotons(::google::protobuf::int32 value);

  // optional float step_start_x = 2;
  void clear_step_start_x();
  static const int kStepStartXFieldNumber = 2;
  float step_start_x() const;
  void set_step_start_x(float value);

  // optional float step_start_y = 3;
  void clear_step_start_y();
  static const int kStepStartYFieldNumber = 3;
  float step_start_y() const;
  void set_step_start_y(float value);

  // optional float step_start_z = 4;
  void clear_step_start_z();
  static const int kStepStartZFieldNumber = 4;
  float step_start_z() const;
  void set_step_start_z(float value);

  // optional float step_start_t = 5;
  void clear_step_start_t();
  static const int kStepStartTFieldNumber = 5;
  float step_start_t() const;
  void set_step_start_t(float value);

  // optional float step_end_x = 6;
  void clear_step_end_x();
  static const int kStepEndXFieldNumber = 6;
  float step_end_x() const;
  void set_step_end_x(float value);

  // optional float step_end_y = 7;
  void clear_step_end_y();
  static const int kStepEndYFieldNumber = 7;
  float step_end_y() const;
  void set_step_end_y(float value);

  // optional float step_end_z = 8;
  void clear_step_end_z();
  static const int kStepEndZFieldNumber = 8;
  float step_end_z() const;
  void set_step_end_z(float value);

  // optional float step_end_t = 9;
  void clear_step_end_t();
  static const int kStepEndTFieldNumber = 9;
  float step_end_t() const;
  void set_step_end_t(float value);

  // optional string material = 10;
  void clear_material();
  static const int kMaterialFieldNumber = 10;
  const ::std::string& material() const;
  void set_material(const ::std::string& value);
  void set_material(const char* value);
  void set_material(const char* value, size_t size);
  ::std::string* mutable_material();
  ::std::string* release_material();
  void set_allocated_material(::std::string* material);

  // @@protoc_insertion_point(class_scope:ratchroma.ScintStep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 nphotons_;
  float step_start_x_;
  float step_start_y_;
  float step_start_z_;
  float step_start_t_;
  float step_end_x_;
  float step_end_y_;
  float step_end_z_;
  ::google::protobuf::internal::ArenaStringPtr material_;
  float step_end_t_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ratchromadata_2eproto();
  friend void protobuf_AssignDesc_ratchromadata_2eproto();
  friend void protobuf_ShutdownFile_ratchromadata_2eproto();

  void InitAsDefaultInstance();
  static ScintStep* default_instance_;
};
// -------------------------------------------------------------------

class ChromaData : public ::google::protobuf::Message {
 public:
  ChromaData();
  virtual ~ChromaData();

  ChromaData(const ChromaData& from);

  inline ChromaData& operator=(const ChromaData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChromaData& default_instance();

  void Swap(ChromaData* other);

  // implements Message ----------------------------------------------

  inline ChromaData* New() const { return New(NULL); }

  ChromaData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChromaData& from);
  void MergeFrom(const ChromaData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromaData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 eventid = 1;
  void clear_eventid();
  static const int kEventidFieldNumber = 1;
  ::google::protobuf::int32 eventid() const;
  void set_eventid(::google::protobuf::int32 value);

  // optional .ratchroma.CherenkovData cherekovphotons = 2;
  bool has_cherekovphotons() const;
  void clear_cherekovphotons();
  static const int kCherekovphotonsFieldNumber = 2;
  const ::ratchroma::CherenkovData& cherekovphotons() const;
  ::ratchroma::CherenkovData* mutable_cherekovphotons();
  ::ratchroma::CherenkovData* release_cherekovphotons();
  void set_allocated_cherekovphotons(::ratchroma::CherenkovData* cherekovphotons);

  // repeated .ratchroma.ScintStep stepdata = 3;
  int stepdata_size() const;
  void clear_stepdata();
  static const int kStepdataFieldNumber = 3;
  const ::ratchroma::ScintStep& stepdata(int index) const;
  ::ratchroma::ScintStep* mutable_stepdata(int index);
  ::ratchroma::ScintStep* add_stepdata();
  const ::google::protobuf::RepeatedPtrField< ::ratchroma::ScintStep >&
      stepdata() const;
  ::google::protobuf::RepeatedPtrField< ::ratchroma::ScintStep >*
      mutable_stepdata();

  // @@protoc_insertion_point(class_scope:ratchroma.ChromaData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::ratchroma::CherenkovData* cherekovphotons_;
  ::google::protobuf::RepeatedPtrField< ::ratchroma::ScintStep > stepdata_;
  ::google::protobuf::int32 eventid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ratchromadata_2eproto();
  friend void protobuf_AssignDesc_ratchromadata_2eproto();
  friend void protobuf_ShutdownFile_ratchromadata_2eproto();

  void InitAsDefaultInstance();
  static ChromaData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CherenkovData

// optional int32 nphotons = 1;
inline void CherenkovData::clear_nphotons() {
  nphotons_ = 0;
}
inline ::google::protobuf::int32 CherenkovData::nphotons() const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovData.nphotons)
  return nphotons_;
}
inline void CherenkovData::set_nphotons(::google::protobuf::int32 value) {
  
  nphotons_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovData.nphotons)
}

// repeated float x = 2;
inline int CherenkovData::x_size() const {
  return x_.size();
}
inline void CherenkovData::clear_x() {
  x_.Clear();
}
inline float CherenkovData::x(int index) const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovData.x)
  return x_.Get(index);
}
inline void CherenkovData::set_x(int index, float value) {
  x_.Set(index, value);
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovData.x)
}
inline void CherenkovData::add_x(float value) {
  x_.Add(value);
  // @@protoc_insertion_point(field_add:ratchroma.CherenkovData.x)
}
inline const ::google::protobuf::RepeatedField< float >&
CherenkovData::x() const {
  // @@protoc_insertion_point(field_list:ratchroma.CherenkovData.x)
  return x_;
}
inline ::google::protobuf::RepeatedField< float >*
CherenkovData::mutable_x() {
  // @@protoc_insertion_point(field_mutable_list:ratchroma.CherenkovData.x)
  return &x_;
}

// repeated float y = 3;
inline int CherenkovData::y_size() const {
  return y_.size();
}
inline void CherenkovData::clear_y() {
  y_.Clear();
}
inline float CherenkovData::y(int index) const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovData.y)
  return y_.Get(index);
}
inline void CherenkovData::set_y(int index, float value) {
  y_.Set(index, value);
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovData.y)
}
inline void CherenkovData::add_y(float value) {
  y_.Add(value);
  // @@protoc_insertion_point(field_add:ratchroma.CherenkovData.y)
}
inline const ::google::protobuf::RepeatedField< float >&
CherenkovData::y() const {
  // @@protoc_insertion_point(field_list:ratchroma.CherenkovData.y)
  return y_;
}
inline ::google::protobuf::RepeatedField< float >*
CherenkovData::mutable_y() {
  // @@protoc_insertion_point(field_mutable_list:ratchroma.CherenkovData.y)
  return &y_;
}

// repeated float z = 4;
inline int CherenkovData::z_size() const {
  return z_.size();
}
inline void CherenkovData::clear_z() {
  z_.Clear();
}
inline float CherenkovData::z(int index) const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovData.z)
  return z_.Get(index);
}
inline void CherenkovData::set_z(int index, float value) {
  z_.Set(index, value);
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovData.z)
}
inline void CherenkovData::add_z(float value) {
  z_.Add(value);
  // @@protoc_insertion_point(field_add:ratchroma.CherenkovData.z)
}
inline const ::google::protobuf::RepeatedField< float >&
CherenkovData::z() const {
  // @@protoc_insertion_point(field_list:ratchroma.CherenkovData.z)
  return z_;
}
inline ::google::protobuf::RepeatedField< float >*
CherenkovData::mutable_z() {
  // @@protoc_insertion_point(field_mutable_list:ratchroma.CherenkovData.z)
  return &z_;
}

// repeated float t = 5;
inline int CherenkovData::t_size() const {
  return t_.size();
}
inline void CherenkovData::clear_t() {
  t_.Clear();
}
inline float CherenkovData::t(int index) const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovData.t)
  return t_.Get(index);
}
inline void CherenkovData::set_t(int index, float value) {
  t_.Set(index, value);
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovData.t)
}
inline void CherenkovData::add_t(float value) {
  t_.Add(value);
  // @@protoc_insertion_point(field_add:ratchroma.CherenkovData.t)
}
inline const ::google::protobuf::RepeatedField< float >&
CherenkovData::t() const {
  // @@protoc_insertion_point(field_list:ratchroma.CherenkovData.t)
  return t_;
}
inline ::google::protobuf::RepeatedField< float >*
CherenkovData::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:ratchroma.CherenkovData.t)
  return &t_;
}

// repeated float dx = 6;
inline int CherenkovData::dx_size() const {
  return dx_.size();
}
inline void CherenkovData::clear_dx() {
  dx_.Clear();
}
inline float CherenkovData::dx(int index) const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovData.dx)
  return dx_.Get(index);
}
inline void CherenkovData::set_dx(int index, float value) {
  dx_.Set(index, value);
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovData.dx)
}
inline void CherenkovData::add_dx(float value) {
  dx_.Add(value);
  // @@protoc_insertion_point(field_add:ratchroma.CherenkovData.dx)
}
inline const ::google::protobuf::RepeatedField< float >&
CherenkovData::dx() const {
  // @@protoc_insertion_point(field_list:ratchroma.CherenkovData.dx)
  return dx_;
}
inline ::google::protobuf::RepeatedField< float >*
CherenkovData::mutable_dx() {
  // @@protoc_insertion_point(field_mutable_list:ratchroma.CherenkovData.dx)
  return &dx_;
}

// repeated float dy = 7;
inline int CherenkovData::dy_size() const {
  return dy_.size();
}
inline void CherenkovData::clear_dy() {
  dy_.Clear();
}
inline float CherenkovData::dy(int index) const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovData.dy)
  return dy_.Get(index);
}
inline void CherenkovData::set_dy(int index, float value) {
  dy_.Set(index, value);
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovData.dy)
}
inline void CherenkovData::add_dy(float value) {
  dy_.Add(value);
  // @@protoc_insertion_point(field_add:ratchroma.CherenkovData.dy)
}
inline const ::google::protobuf::RepeatedField< float >&
CherenkovData::dy() const {
  // @@protoc_insertion_point(field_list:ratchroma.CherenkovData.dy)
  return dy_;
}
inline ::google::protobuf::RepeatedField< float >*
CherenkovData::mutable_dy() {
  // @@protoc_insertion_point(field_mutable_list:ratchroma.CherenkovData.dy)
  return &dy_;
}

// repeated float dz = 8;
inline int CherenkovData::dz_size() const {
  return dz_.size();
}
inline void CherenkovData::clear_dz() {
  dz_.Clear();
}
inline float CherenkovData::dz(int index) const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovData.dz)
  return dz_.Get(index);
}
inline void CherenkovData::set_dz(int index, float value) {
  dz_.Set(index, value);
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovData.dz)
}
inline void CherenkovData::add_dz(float value) {
  dz_.Add(value);
  // @@protoc_insertion_point(field_add:ratchroma.CherenkovData.dz)
}
inline const ::google::protobuf::RepeatedField< float >&
CherenkovData::dz() const {
  // @@protoc_insertion_point(field_list:ratchroma.CherenkovData.dz)
  return dz_;
}
inline ::google::protobuf::RepeatedField< float >*
CherenkovData::mutable_dz() {
  // @@protoc_insertion_point(field_mutable_list:ratchroma.CherenkovData.dz)
  return &dz_;
}

// repeated float wavelength = 9;
inline int CherenkovData::wavelength_size() const {
  return wavelength_.size();
}
inline void CherenkovData::clear_wavelength() {
  wavelength_.Clear();
}
inline float CherenkovData::wavelength(int index) const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovData.wavelength)
  return wavelength_.Get(index);
}
inline void CherenkovData::set_wavelength(int index, float value) {
  wavelength_.Set(index, value);
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovData.wavelength)
}
inline void CherenkovData::add_wavelength(float value) {
  wavelength_.Add(value);
  // @@protoc_insertion_point(field_add:ratchroma.CherenkovData.wavelength)
}
inline const ::google::protobuf::RepeatedField< float >&
CherenkovData::wavelength() const {
  // @@protoc_insertion_point(field_list:ratchroma.CherenkovData.wavelength)
  return wavelength_;
}
inline ::google::protobuf::RepeatedField< float >*
CherenkovData::mutable_wavelength() {
  // @@protoc_insertion_point(field_mutable_list:ratchroma.CherenkovData.wavelength)
  return &wavelength_;
}

// repeated float px = 10;
inline int CherenkovData::px_size() const {
  return px_.size();
}
inline void CherenkovData::clear_px() {
  px_.Clear();
}
inline float CherenkovData::px(int index) const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovData.px)
  return px_.Get(index);
}
inline void CherenkovData::set_px(int index, float value) {
  px_.Set(index, value);
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovData.px)
}
inline void CherenkovData::add_px(float value) {
  px_.Add(value);
  // @@protoc_insertion_point(field_add:ratchroma.CherenkovData.px)
}
inline const ::google::protobuf::RepeatedField< float >&
CherenkovData::px() const {
  // @@protoc_insertion_point(field_list:ratchroma.CherenkovData.px)
  return px_;
}
inline ::google::protobuf::RepeatedField< float >*
CherenkovData::mutable_px() {
  // @@protoc_insertion_point(field_mutable_list:ratchroma.CherenkovData.px)
  return &px_;
}

// repeated float py = 11;
inline int CherenkovData::py_size() const {
  return py_.size();
}
inline void CherenkovData::clear_py() {
  py_.Clear();
}
inline float CherenkovData::py(int index) const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovData.py)
  return py_.Get(index);
}
inline void CherenkovData::set_py(int index, float value) {
  py_.Set(index, value);
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovData.py)
}
inline void CherenkovData::add_py(float value) {
  py_.Add(value);
  // @@protoc_insertion_point(field_add:ratchroma.CherenkovData.py)
}
inline const ::google::protobuf::RepeatedField< float >&
CherenkovData::py() const {
  // @@protoc_insertion_point(field_list:ratchroma.CherenkovData.py)
  return py_;
}
inline ::google::protobuf::RepeatedField< float >*
CherenkovData::mutable_py() {
  // @@protoc_insertion_point(field_mutable_list:ratchroma.CherenkovData.py)
  return &py_;
}

// repeated float pz = 12;
inline int CherenkovData::pz_size() const {
  return pz_.size();
}
inline void CherenkovData::clear_pz() {
  pz_.Clear();
}
inline float CherenkovData::pz(int index) const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovData.pz)
  return pz_.Get(index);
}
inline void CherenkovData::set_pz(int index, float value) {
  pz_.Set(index, value);
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovData.pz)
}
inline void CherenkovData::add_pz(float value) {
  pz_.Add(value);
  // @@protoc_insertion_point(field_add:ratchroma.CherenkovData.pz)
}
inline const ::google::protobuf::RepeatedField< float >&
CherenkovData::pz() const {
  // @@protoc_insertion_point(field_list:ratchroma.CherenkovData.pz)
  return pz_;
}
inline ::google::protobuf::RepeatedField< float >*
CherenkovData::mutable_pz() {
  // @@protoc_insertion_point(field_mutable_list:ratchroma.CherenkovData.pz)
  return &pz_;
}

// -------------------------------------------------------------------

// ScintStep

// optional int32 nphotons = 1;
inline void ScintStep::clear_nphotons() {
  nphotons_ = 0;
}
inline ::google::protobuf::int32 ScintStep::nphotons() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.nphotons)
  return nphotons_;
}
inline void ScintStep::set_nphotons(::google::protobuf::int32 value) {
  
  nphotons_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.nphotons)
}

// optional float step_start_x = 2;
inline void ScintStep::clear_step_start_x() {
  step_start_x_ = 0;
}
inline float ScintStep::step_start_x() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.step_start_x)
  return step_start_x_;
}
inline void ScintStep::set_step_start_x(float value) {
  
  step_start_x_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.step_start_x)
}

// optional float step_start_y = 3;
inline void ScintStep::clear_step_start_y() {
  step_start_y_ = 0;
}
inline float ScintStep::step_start_y() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.step_start_y)
  return step_start_y_;
}
inline void ScintStep::set_step_start_y(float value) {
  
  step_start_y_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.step_start_y)
}

// optional float step_start_z = 4;
inline void ScintStep::clear_step_start_z() {
  step_start_z_ = 0;
}
inline float ScintStep::step_start_z() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.step_start_z)
  return step_start_z_;
}
inline void ScintStep::set_step_start_z(float value) {
  
  step_start_z_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.step_start_z)
}

// optional float step_start_t = 5;
inline void ScintStep::clear_step_start_t() {
  step_start_t_ = 0;
}
inline float ScintStep::step_start_t() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.step_start_t)
  return step_start_t_;
}
inline void ScintStep::set_step_start_t(float value) {
  
  step_start_t_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.step_start_t)
}

// optional float step_end_x = 6;
inline void ScintStep::clear_step_end_x() {
  step_end_x_ = 0;
}
inline float ScintStep::step_end_x() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.step_end_x)
  return step_end_x_;
}
inline void ScintStep::set_step_end_x(float value) {
  
  step_end_x_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.step_end_x)
}

// optional float step_end_y = 7;
inline void ScintStep::clear_step_end_y() {
  step_end_y_ = 0;
}
inline float ScintStep::step_end_y() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.step_end_y)
  return step_end_y_;
}
inline void ScintStep::set_step_end_y(float value) {
  
  step_end_y_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.step_end_y)
}

// optional float step_end_z = 8;
inline void ScintStep::clear_step_end_z() {
  step_end_z_ = 0;
}
inline float ScintStep::step_end_z() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.step_end_z)
  return step_end_z_;
}
inline void ScintStep::set_step_end_z(float value) {
  
  step_end_z_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.step_end_z)
}

// optional float step_end_t = 9;
inline void ScintStep::clear_step_end_t() {
  step_end_t_ = 0;
}
inline float ScintStep::step_end_t() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.step_end_t)
  return step_end_t_;
}
inline void ScintStep::set_step_end_t(float value) {
  
  step_end_t_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.step_end_t)
}

// optional string material = 10;
inline void ScintStep::clear_material() {
  material_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScintStep::material() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.material)
  return material_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScintStep::set_material(const ::std::string& value) {
  
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.material)
}
inline void ScintStep::set_material(const char* value) {
  
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ratchroma.ScintStep.material)
}
inline void ScintStep::set_material(const char* value, size_t size) {
  
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ratchroma.ScintStep.material)
}
inline ::std::string* ScintStep::mutable_material() {
  
  // @@protoc_insertion_point(field_mutable:ratchroma.ScintStep.material)
  return material_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScintStep::release_material() {
  
  return material_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScintStep::set_allocated_material(::std::string* material) {
  if (material != NULL) {
    
  } else {
    
  }
  material_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), material);
  // @@protoc_insertion_point(field_set_allocated:ratchroma.ScintStep.material)
}

// -------------------------------------------------------------------

// ChromaData

// optional int32 eventid = 1;
inline void ChromaData::clear_eventid() {
  eventid_ = 0;
}
inline ::google::protobuf::int32 ChromaData::eventid() const {
  // @@protoc_insertion_point(field_get:ratchroma.ChromaData.eventid)
  return eventid_;
}
inline void ChromaData::set_eventid(::google::protobuf::int32 value) {
  
  eventid_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ChromaData.eventid)
}

// optional .ratchroma.CherenkovData cherekovphotons = 2;
inline bool ChromaData::has_cherekovphotons() const {
  return !_is_default_instance_ && cherekovphotons_ != NULL;
}
inline void ChromaData::clear_cherekovphotons() {
  if (GetArenaNoVirtual() == NULL && cherekovphotons_ != NULL) delete cherekovphotons_;
  cherekovphotons_ = NULL;
}
inline const ::ratchroma::CherenkovData& ChromaData::cherekovphotons() const {
  // @@protoc_insertion_point(field_get:ratchroma.ChromaData.cherekovphotons)
  return cherekovphotons_ != NULL ? *cherekovphotons_ : *default_instance_->cherekovphotons_;
}
inline ::ratchroma::CherenkovData* ChromaData::mutable_cherekovphotons() {
  
  if (cherekovphotons_ == NULL) {
    cherekovphotons_ = new ::ratchroma::CherenkovData;
  }
  // @@protoc_insertion_point(field_mutable:ratchroma.ChromaData.cherekovphotons)
  return cherekovphotons_;
}
inline ::ratchroma::CherenkovData* ChromaData::release_cherekovphotons() {
  
  ::ratchroma::CherenkovData* temp = cherekovphotons_;
  cherekovphotons_ = NULL;
  return temp;
}
inline void ChromaData::set_allocated_cherekovphotons(::ratchroma::CherenkovData* cherekovphotons) {
  delete cherekovphotons_;
  cherekovphotons_ = cherekovphotons;
  if (cherekovphotons) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ratchroma.ChromaData.cherekovphotons)
}

// repeated .ratchroma.ScintStep stepdata = 3;
inline int ChromaData::stepdata_size() const {
  return stepdata_.size();
}
inline void ChromaData::clear_stepdata() {
  stepdata_.Clear();
}
inline const ::ratchroma::ScintStep& ChromaData::stepdata(int index) const {
  // @@protoc_insertion_point(field_get:ratchroma.ChromaData.stepdata)
  return stepdata_.Get(index);
}
inline ::ratchroma::ScintStep* ChromaData::mutable_stepdata(int index) {
  // @@protoc_insertion_point(field_mutable:ratchroma.ChromaData.stepdata)
  return stepdata_.Mutable(index);
}
inline ::ratchroma::ScintStep* ChromaData::add_stepdata() {
  // @@protoc_insertion_point(field_add:ratchroma.ChromaData.stepdata)
  return stepdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ratchroma::ScintStep >&
ChromaData::stepdata() const {
  // @@protoc_insertion_point(field_list:ratchroma.ChromaData.stepdata)
  return stepdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::ratchroma::ScintStep >*
ChromaData::mutable_stepdata() {
  // @@protoc_insertion_point(field_mutable_list:ratchroma.ChromaData.stepdata)
  return &stepdata_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ratchroma

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ratchromadata_2eproto__INCLUDED
