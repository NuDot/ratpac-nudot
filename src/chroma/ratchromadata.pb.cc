// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ratchromadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ratchromadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ratchroma {

namespace {

const ::google::protobuf::Descriptor* CherenkovData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CherenkovData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScintStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScintStep_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChromaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChromaData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ratchromadata_2eproto() {
  protobuf_AddDesc_ratchromadata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ratchromadata.proto");
  GOOGLE_CHECK(file != NULL);
  CherenkovData_descriptor_ = file->message_type(0);
  static const int CherenkovData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovData, nphotons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovData, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovData, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovData, dx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovData, dy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovData, dz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovData, wavelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovData, px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovData, py_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovData, pz_),
  };
  CherenkovData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CherenkovData_descriptor_,
      CherenkovData::default_instance_,
      CherenkovData_offsets_,
      -1,
      -1,
      -1,
      sizeof(CherenkovData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CherenkovData, _is_default_instance_));
  ScintStep_descriptor_ = file->message_type(1);
  static const int ScintStep_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScintStep, nphotons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScintStep, step_start_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScintStep, step_start_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScintStep, step_start_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScintStep, step_start_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScintStep, step_end_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScintStep, step_end_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScintStep, step_end_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScintStep, step_end_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScintStep, material_),
  };
  ScintStep_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScintStep_descriptor_,
      ScintStep::default_instance_,
      ScintStep_offsets_,
      -1,
      -1,
      -1,
      sizeof(ScintStep),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScintStep, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScintStep, _is_default_instance_));
  ChromaData_descriptor_ = file->message_type(2);
  static const int ChromaData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChromaData, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChromaData, cherekovphotons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChromaData, stepdata_),
  };
  ChromaData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChromaData_descriptor_,
      ChromaData::default_instance_,
      ChromaData_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChromaData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChromaData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChromaData, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ratchromadata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CherenkovData_descriptor_, &CherenkovData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScintStep_descriptor_, &ScintStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChromaData_descriptor_, &ChromaData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ratchromadata_2eproto() {
  delete CherenkovData::default_instance_;
  delete CherenkovData_reflection_;
  delete ScintStep::default_instance_;
  delete ScintStep_reflection_;
  delete ChromaData::default_instance_;
  delete ChromaData_reflection_;
}

void protobuf_AddDesc_ratchromadata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ratchromadata.proto\022\tratchroma\"\251\001\n\rChe"
    "renkovData\022\020\n\010nphotons\030\001 \001(\005\022\t\n\001x\030\002 \003(\002\022"
    "\t\n\001y\030\003 \003(\002\022\t\n\001z\030\004 \003(\002\022\t\n\001t\030\005 \003(\002\022\n\n\002dx\030\006"
    " \003(\002\022\n\n\002dy\030\007 \003(\002\022\n\n\002dz\030\010 \003(\002\022\022\n\nwaveleng"
    "th\030\t \003(\002\022\n\n\002px\030\n \003(\002\022\n\n\002py\030\013 \003(\002\022\n\n\002pz\030\014"
    " \003(\002\"\327\001\n\tScintStep\022\020\n\010nphotons\030\001 \001(\005\022\024\n\014"
    "step_start_x\030\002 \001(\002\022\024\n\014step_start_y\030\003 \001(\002"
    "\022\024\n\014step_start_z\030\004 \001(\002\022\024\n\014step_start_t\030\005"
    " \001(\002\022\022\n\nstep_end_x\030\006 \001(\002\022\022\n\nstep_end_y\030\007"
    " \001(\002\022\022\n\nstep_end_z\030\010 \001(\002\022\022\n\nstep_end_t\030\t"
    " \001(\002\022\020\n\010material\030\n \001(\t\"x\n\nChromaData\022\017\n\007"
    "eventid\030\001 \001(\005\0221\n\017cherekovphotons\030\002 \001(\0132\030"
    ".ratchroma.CherenkovData\022&\n\010stepdata\030\003 \003"
    "(\0132\024.ratchroma.ScintStepb\006proto3", 552);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ratchromadata.proto", &protobuf_RegisterTypes);
  CherenkovData::default_instance_ = new CherenkovData();
  ScintStep::default_instance_ = new ScintStep();
  ChromaData::default_instance_ = new ChromaData();
  CherenkovData::default_instance_->InitAsDefaultInstance();
  ScintStep::default_instance_->InitAsDefaultInstance();
  ChromaData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ratchromadata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ratchromadata_2eproto {
  StaticDescriptorInitializer_ratchromadata_2eproto() {
    protobuf_AddDesc_ratchromadata_2eproto();
  }
} static_descriptor_initializer_ratchromadata_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int CherenkovData::kNphotonsFieldNumber;
const int CherenkovData::kXFieldNumber;
const int CherenkovData::kYFieldNumber;
const int CherenkovData::kZFieldNumber;
const int CherenkovData::kTFieldNumber;
const int CherenkovData::kDxFieldNumber;
const int CherenkovData::kDyFieldNumber;
const int CherenkovData::kDzFieldNumber;
const int CherenkovData::kWavelengthFieldNumber;
const int CherenkovData::kPxFieldNumber;
const int CherenkovData::kPyFieldNumber;
const int CherenkovData::kPzFieldNumber;
#endif  // !_MSC_VER

CherenkovData::CherenkovData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ratchroma.CherenkovData)
}

void CherenkovData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CherenkovData::CherenkovData(const CherenkovData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ratchroma.CherenkovData)
}

void CherenkovData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  nphotons_ = 0;
}

CherenkovData::~CherenkovData() {
  // @@protoc_insertion_point(destructor:ratchroma.CherenkovData)
  SharedDtor();
}

void CherenkovData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CherenkovData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CherenkovData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CherenkovData_descriptor_;
}

const CherenkovData& CherenkovData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ratchromadata_2eproto();
  return *default_instance_;
}

CherenkovData* CherenkovData::default_instance_ = NULL;

CherenkovData* CherenkovData::New(::google::protobuf::Arena* arena) const {
  CherenkovData* n = new CherenkovData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CherenkovData::Clear() {
  nphotons_ = 0;
  x_.Clear();
  y_.Clear();
  z_.Clear();
  t_.Clear();
  dx_.Clear();
  dy_.Clear();
  dz_.Clear();
  wavelength_.Clear();
  px_.Clear();
  py_.Clear();
  pz_.Clear();
}

bool CherenkovData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ratchroma.CherenkovData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nphotons = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nphotons_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // repeated float x = 2;
      case 2: {
        if (tag == 21) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_x())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_x())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_x;
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // repeated float y = 3;
      case 3: {
        if (tag == 29) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_y())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_y())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_y;
        if (input->ExpectTag(37)) goto parse_z;
        break;
      }

      // repeated float z = 4;
      case 4: {
        if (tag == 37) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_z())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_z())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_z;
        if (input->ExpectTag(45)) goto parse_t;
        break;
      }

      // repeated float t = 5;
      case 5: {
        if (tag == 45) {
         parse_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_t())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_t())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_t;
        if (input->ExpectTag(53)) goto parse_dx;
        break;
      }

      // repeated float dx = 6;
      case 6: {
        if (tag == 53) {
         parse_dx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_dx())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_dx())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_dx;
        if (input->ExpectTag(61)) goto parse_dy;
        break;
      }

      // repeated float dy = 7;
      case 7: {
        if (tag == 61) {
         parse_dy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61, input, this->mutable_dy())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_dy())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_dy;
        if (input->ExpectTag(69)) goto parse_dz;
        break;
      }

      // repeated float dz = 8;
      case 8: {
        if (tag == 69) {
         parse_dz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 69, input, this->mutable_dz())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_dz())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_dz;
        if (input->ExpectTag(77)) goto parse_wavelength;
        break;
      }

      // repeated float wavelength = 9;
      case 9: {
        if (tag == 77) {
         parse_wavelength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 77, input, this->mutable_wavelength())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_wavelength())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_wavelength;
        if (input->ExpectTag(85)) goto parse_px;
        break;
      }

      // repeated float px = 10;
      case 10: {
        if (tag == 85) {
         parse_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 85, input, this->mutable_px())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_px())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_px;
        if (input->ExpectTag(93)) goto parse_py;
        break;
      }

      // repeated float py = 11;
      case 11: {
        if (tag == 93) {
         parse_py:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 93, input, this->mutable_py())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_py())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_py;
        if (input->ExpectTag(101)) goto parse_pz;
        break;
      }

      // repeated float pz = 12;
      case 12: {
        if (tag == 101) {
         parse_pz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 101, input, this->mutable_pz())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pz())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_pz;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ratchroma.CherenkovData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ratchroma.CherenkovData)
  return false;
#undef DO_
}

void CherenkovData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ratchroma.CherenkovData)
  // optional int32 nphotons = 1;
  if (this->nphotons() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nphotons(), output);
  }

  // repeated float x = 2;
  if (this->x_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_x_cached_byte_size_);
  }
  for (int i = 0; i < this->x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->x(i), output);
  }

  // repeated float y = 3;
  if (this->y_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_y_cached_byte_size_);
  }
  for (int i = 0; i < this->y_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->y(i), output);
  }

  // repeated float z = 4;
  if (this->z_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_z_cached_byte_size_);
  }
  for (int i = 0; i < this->z_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->z(i), output);
  }

  // repeated float t = 5;
  if (this->t_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_t_cached_byte_size_);
  }
  for (int i = 0; i < this->t_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->t(i), output);
  }

  // repeated float dx = 6;
  if (this->dx_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dx_cached_byte_size_);
  }
  for (int i = 0; i < this->dx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->dx(i), output);
  }

  // repeated float dy = 7;
  if (this->dy_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dy_cached_byte_size_);
  }
  for (int i = 0; i < this->dy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->dy(i), output);
  }

  // repeated float dz = 8;
  if (this->dz_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dz_cached_byte_size_);
  }
  for (int i = 0; i < this->dz_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->dz(i), output);
  }

  // repeated float wavelength = 9;
  if (this->wavelength_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_wavelength_cached_byte_size_);
  }
  for (int i = 0; i < this->wavelength_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->wavelength(i), output);
  }

  // repeated float px = 10;
  if (this->px_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_px_cached_byte_size_);
  }
  for (int i = 0; i < this->px_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->px(i), output);
  }

  // repeated float py = 11;
  if (this->py_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_py_cached_byte_size_);
  }
  for (int i = 0; i < this->py_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->py(i), output);
  }

  // repeated float pz = 12;
  if (this->pz_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pz_cached_byte_size_);
  }
  for (int i = 0; i < this->pz_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->pz(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ratchroma.CherenkovData)
}

::google::protobuf::uint8* CherenkovData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ratchroma.CherenkovData)
  // optional int32 nphotons = 1;
  if (this->nphotons() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nphotons(), target);
  }

  // repeated float x = 2;
  if (this->x_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _x_cached_byte_size_, target);
  }
  for (int i = 0; i < this->x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->x(i), target);
  }

  // repeated float y = 3;
  if (this->y_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _y_cached_byte_size_, target);
  }
  for (int i = 0; i < this->y_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->y(i), target);
  }

  // repeated float z = 4;
  if (this->z_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _z_cached_byte_size_, target);
  }
  for (int i = 0; i < this->z_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->z(i), target);
  }

  // repeated float t = 5;
  if (this->t_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _t_cached_byte_size_, target);
  }
  for (int i = 0; i < this->t_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->t(i), target);
  }

  // repeated float dx = 6;
  if (this->dx_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dx_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->dx(i), target);
  }

  // repeated float dy = 7;
  if (this->dy_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dy_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->dy(i), target);
  }

  // repeated float dz = 8;
  if (this->dz_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dz_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dz_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->dz(i), target);
  }

  // repeated float wavelength = 9;
  if (this->wavelength_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _wavelength_cached_byte_size_, target);
  }
  for (int i = 0; i < this->wavelength_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->wavelength(i), target);
  }

  // repeated float px = 10;
  if (this->px_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _px_cached_byte_size_, target);
  }
  for (int i = 0; i < this->px_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->px(i), target);
  }

  // repeated float py = 11;
  if (this->py_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _py_cached_byte_size_, target);
  }
  for (int i = 0; i < this->py_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->py(i), target);
  }

  // repeated float pz = 12;
  if (this->pz_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pz_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pz_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->pz(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ratchroma.CherenkovData)
  return target;
}

int CherenkovData::ByteSize() const {
  int total_size = 0;

  // optional int32 nphotons = 1;
  if (this->nphotons() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nphotons());
  }

  // repeated float x = 2;
  {
    int data_size = 0;
    data_size = 4 * this->x_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _x_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float y = 3;
  {
    int data_size = 0;
    data_size = 4 * this->y_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _y_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float z = 4;
  {
    int data_size = 0;
    data_size = 4 * this->z_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _z_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float t = 5;
  {
    int data_size = 0;
    data_size = 4 * this->t_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _t_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float dx = 6;
  {
    int data_size = 0;
    data_size = 4 * this->dx_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dx_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float dy = 7;
  {
    int data_size = 0;
    data_size = 4 * this->dy_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dy_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float dz = 8;
  {
    int data_size = 0;
    data_size = 4 * this->dz_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dz_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float wavelength = 9;
  {
    int data_size = 0;
    data_size = 4 * this->wavelength_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _wavelength_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float px = 10;
  {
    int data_size = 0;
    data_size = 4 * this->px_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _px_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float py = 11;
  {
    int data_size = 0;
    data_size = 4 * this->py_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _py_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float pz = 12;
  {
    int data_size = 0;
    data_size = 4 * this->pz_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pz_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CherenkovData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CherenkovData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CherenkovData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CherenkovData::MergeFrom(const CherenkovData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  x_.MergeFrom(from.x_);
  y_.MergeFrom(from.y_);
  z_.MergeFrom(from.z_);
  t_.MergeFrom(from.t_);
  dx_.MergeFrom(from.dx_);
  dy_.MergeFrom(from.dy_);
  dz_.MergeFrom(from.dz_);
  wavelength_.MergeFrom(from.wavelength_);
  px_.MergeFrom(from.px_);
  py_.MergeFrom(from.py_);
  pz_.MergeFrom(from.pz_);
  if (from.nphotons() != 0) {
    set_nphotons(from.nphotons());
  }
}

void CherenkovData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CherenkovData::CopyFrom(const CherenkovData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CherenkovData::IsInitialized() const {

  return true;
}

void CherenkovData::Swap(CherenkovData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CherenkovData::InternalSwap(CherenkovData* other) {
  std::swap(nphotons_, other->nphotons_);
  x_.UnsafeArenaSwap(&other->x_);
  y_.UnsafeArenaSwap(&other->y_);
  z_.UnsafeArenaSwap(&other->z_);
  t_.UnsafeArenaSwap(&other->t_);
  dx_.UnsafeArenaSwap(&other->dx_);
  dy_.UnsafeArenaSwap(&other->dy_);
  dz_.UnsafeArenaSwap(&other->dz_);
  wavelength_.UnsafeArenaSwap(&other->wavelength_);
  px_.UnsafeArenaSwap(&other->px_);
  py_.UnsafeArenaSwap(&other->py_);
  pz_.UnsafeArenaSwap(&other->pz_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CherenkovData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CherenkovData_descriptor_;
  metadata.reflection = CherenkovData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CherenkovData

// optional int32 nphotons = 1;
void CherenkovData::clear_nphotons() {
  nphotons_ = 0;
}
 ::google::protobuf::int32 CherenkovData::nphotons() const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovData.nphotons)
  return nphotons_;
}
 void CherenkovData::set_nphotons(::google::protobuf::int32 value) {
  
  nphotons_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovData.nphotons)
}

// repeated float x = 2;
int CherenkovData::x_size() const {
  return x_.size();
}
void CherenkovData::clear_x() {
  x_.Clear();
}
 float CherenkovData::x(int index) const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovData.x)
  return x_.Get(index);
}
 void CherenkovData::set_x(int index, float value) {
  x_.Set(index, value);
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovData.x)
}
 void CherenkovData::add_x(float value) {
  x_.Add(value);
  // @@protoc_insertion_point(field_add:ratchroma.CherenkovData.x)
}
 const ::google::protobuf::RepeatedField< float >&
CherenkovData::x() const {
  // @@protoc_insertion_point(field_list:ratchroma.CherenkovData.x)
  return x_;
}
 ::google::protobuf::RepeatedField< float >*
CherenkovData::mutable_x() {
  // @@protoc_insertion_point(field_mutable_list:ratchroma.CherenkovData.x)
  return &x_;
}

// repeated float y = 3;
int CherenkovData::y_size() const {
  return y_.size();
}
void CherenkovData::clear_y() {
  y_.Clear();
}
 float CherenkovData::y(int index) const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovData.y)
  return y_.Get(index);
}
 void CherenkovData::set_y(int index, float value) {
  y_.Set(index, value);
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovData.y)
}
 void CherenkovData::add_y(float value) {
  y_.Add(value);
  // @@protoc_insertion_point(field_add:ratchroma.CherenkovData.y)
}
 const ::google::protobuf::RepeatedField< float >&
CherenkovData::y() const {
  // @@protoc_insertion_point(field_list:ratchroma.CherenkovData.y)
  return y_;
}
 ::google::protobuf::RepeatedField< float >*
CherenkovData::mutable_y() {
  // @@protoc_insertion_point(field_mutable_list:ratchroma.CherenkovData.y)
  return &y_;
}

// repeated float z = 4;
int CherenkovData::z_size() const {
  return z_.size();
}
void CherenkovData::clear_z() {
  z_.Clear();
}
 float CherenkovData::z(int index) const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovData.z)
  return z_.Get(index);
}
 void CherenkovData::set_z(int index, float value) {
  z_.Set(index, value);
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovData.z)
}
 void CherenkovData::add_z(float value) {
  z_.Add(value);
  // @@protoc_insertion_point(field_add:ratchroma.CherenkovData.z)
}
 const ::google::protobuf::RepeatedField< float >&
CherenkovData::z() const {
  // @@protoc_insertion_point(field_list:ratchroma.CherenkovData.z)
  return z_;
}
 ::google::protobuf::RepeatedField< float >*
CherenkovData::mutable_z() {
  // @@protoc_insertion_point(field_mutable_list:ratchroma.CherenkovData.z)
  return &z_;
}

// repeated float t = 5;
int CherenkovData::t_size() const {
  return t_.size();
}
void CherenkovData::clear_t() {
  t_.Clear();
}
 float CherenkovData::t(int index) const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovData.t)
  return t_.Get(index);
}
 void CherenkovData::set_t(int index, float value) {
  t_.Set(index, value);
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovData.t)
}
 void CherenkovData::add_t(float value) {
  t_.Add(value);
  // @@protoc_insertion_point(field_add:ratchroma.CherenkovData.t)
}
 const ::google::protobuf::RepeatedField< float >&
CherenkovData::t() const {
  // @@protoc_insertion_point(field_list:ratchroma.CherenkovData.t)
  return t_;
}
 ::google::protobuf::RepeatedField< float >*
CherenkovData::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:ratchroma.CherenkovData.t)
  return &t_;
}

// repeated float dx = 6;
int CherenkovData::dx_size() const {
  return dx_.size();
}
void CherenkovData::clear_dx() {
  dx_.Clear();
}
 float CherenkovData::dx(int index) const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovData.dx)
  return dx_.Get(index);
}
 void CherenkovData::set_dx(int index, float value) {
  dx_.Set(index, value);
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovData.dx)
}
 void CherenkovData::add_dx(float value) {
  dx_.Add(value);
  // @@protoc_insertion_point(field_add:ratchroma.CherenkovData.dx)
}
 const ::google::protobuf::RepeatedField< float >&
CherenkovData::dx() const {
  // @@protoc_insertion_point(field_list:ratchroma.CherenkovData.dx)
  return dx_;
}
 ::google::protobuf::RepeatedField< float >*
CherenkovData::mutable_dx() {
  // @@protoc_insertion_point(field_mutable_list:ratchroma.CherenkovData.dx)
  return &dx_;
}

// repeated float dy = 7;
int CherenkovData::dy_size() const {
  return dy_.size();
}
void CherenkovData::clear_dy() {
  dy_.Clear();
}
 float CherenkovData::dy(int index) const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovData.dy)
  return dy_.Get(index);
}
 void CherenkovData::set_dy(int index, float value) {
  dy_.Set(index, value);
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovData.dy)
}
 void CherenkovData::add_dy(float value) {
  dy_.Add(value);
  // @@protoc_insertion_point(field_add:ratchroma.CherenkovData.dy)
}
 const ::google::protobuf::RepeatedField< float >&
CherenkovData::dy() const {
  // @@protoc_insertion_point(field_list:ratchroma.CherenkovData.dy)
  return dy_;
}
 ::google::protobuf::RepeatedField< float >*
CherenkovData::mutable_dy() {
  // @@protoc_insertion_point(field_mutable_list:ratchroma.CherenkovData.dy)
  return &dy_;
}

// repeated float dz = 8;
int CherenkovData::dz_size() const {
  return dz_.size();
}
void CherenkovData::clear_dz() {
  dz_.Clear();
}
 float CherenkovData::dz(int index) const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovData.dz)
  return dz_.Get(index);
}
 void CherenkovData::set_dz(int index, float value) {
  dz_.Set(index, value);
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovData.dz)
}
 void CherenkovData::add_dz(float value) {
  dz_.Add(value);
  // @@protoc_insertion_point(field_add:ratchroma.CherenkovData.dz)
}
 const ::google::protobuf::RepeatedField< float >&
CherenkovData::dz() const {
  // @@protoc_insertion_point(field_list:ratchroma.CherenkovData.dz)
  return dz_;
}
 ::google::protobuf::RepeatedField< float >*
CherenkovData::mutable_dz() {
  // @@protoc_insertion_point(field_mutable_list:ratchroma.CherenkovData.dz)
  return &dz_;
}

// repeated float wavelength = 9;
int CherenkovData::wavelength_size() const {
  return wavelength_.size();
}
void CherenkovData::clear_wavelength() {
  wavelength_.Clear();
}
 float CherenkovData::wavelength(int index) const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovData.wavelength)
  return wavelength_.Get(index);
}
 void CherenkovData::set_wavelength(int index, float value) {
  wavelength_.Set(index, value);
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovData.wavelength)
}
 void CherenkovData::add_wavelength(float value) {
  wavelength_.Add(value);
  // @@protoc_insertion_point(field_add:ratchroma.CherenkovData.wavelength)
}
 const ::google::protobuf::RepeatedField< float >&
CherenkovData::wavelength() const {
  // @@protoc_insertion_point(field_list:ratchroma.CherenkovData.wavelength)
  return wavelength_;
}
 ::google::protobuf::RepeatedField< float >*
CherenkovData::mutable_wavelength() {
  // @@protoc_insertion_point(field_mutable_list:ratchroma.CherenkovData.wavelength)
  return &wavelength_;
}

// repeated float px = 10;
int CherenkovData::px_size() const {
  return px_.size();
}
void CherenkovData::clear_px() {
  px_.Clear();
}
 float CherenkovData::px(int index) const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovData.px)
  return px_.Get(index);
}
 void CherenkovData::set_px(int index, float value) {
  px_.Set(index, value);
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovData.px)
}
 void CherenkovData::add_px(float value) {
  px_.Add(value);
  // @@protoc_insertion_point(field_add:ratchroma.CherenkovData.px)
}
 const ::google::protobuf::RepeatedField< float >&
CherenkovData::px() const {
  // @@protoc_insertion_point(field_list:ratchroma.CherenkovData.px)
  return px_;
}
 ::google::protobuf::RepeatedField< float >*
CherenkovData::mutable_px() {
  // @@protoc_insertion_point(field_mutable_list:ratchroma.CherenkovData.px)
  return &px_;
}

// repeated float py = 11;
int CherenkovData::py_size() const {
  return py_.size();
}
void CherenkovData::clear_py() {
  py_.Clear();
}
 float CherenkovData::py(int index) const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovData.py)
  return py_.Get(index);
}
 void CherenkovData::set_py(int index, float value) {
  py_.Set(index, value);
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovData.py)
}
 void CherenkovData::add_py(float value) {
  py_.Add(value);
  // @@protoc_insertion_point(field_add:ratchroma.CherenkovData.py)
}
 const ::google::protobuf::RepeatedField< float >&
CherenkovData::py() const {
  // @@protoc_insertion_point(field_list:ratchroma.CherenkovData.py)
  return py_;
}
 ::google::protobuf::RepeatedField< float >*
CherenkovData::mutable_py() {
  // @@protoc_insertion_point(field_mutable_list:ratchroma.CherenkovData.py)
  return &py_;
}

// repeated float pz = 12;
int CherenkovData::pz_size() const {
  return pz_.size();
}
void CherenkovData::clear_pz() {
  pz_.Clear();
}
 float CherenkovData::pz(int index) const {
  // @@protoc_insertion_point(field_get:ratchroma.CherenkovData.pz)
  return pz_.Get(index);
}
 void CherenkovData::set_pz(int index, float value) {
  pz_.Set(index, value);
  // @@protoc_insertion_point(field_set:ratchroma.CherenkovData.pz)
}
 void CherenkovData::add_pz(float value) {
  pz_.Add(value);
  // @@protoc_insertion_point(field_add:ratchroma.CherenkovData.pz)
}
 const ::google::protobuf::RepeatedField< float >&
CherenkovData::pz() const {
  // @@protoc_insertion_point(field_list:ratchroma.CherenkovData.pz)
  return pz_;
}
 ::google::protobuf::RepeatedField< float >*
CherenkovData::mutable_pz() {
  // @@protoc_insertion_point(field_mutable_list:ratchroma.CherenkovData.pz)
  return &pz_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ScintStep::kNphotonsFieldNumber;
const int ScintStep::kStepStartXFieldNumber;
const int ScintStep::kStepStartYFieldNumber;
const int ScintStep::kStepStartZFieldNumber;
const int ScintStep::kStepStartTFieldNumber;
const int ScintStep::kStepEndXFieldNumber;
const int ScintStep::kStepEndYFieldNumber;
const int ScintStep::kStepEndZFieldNumber;
const int ScintStep::kStepEndTFieldNumber;
const int ScintStep::kMaterialFieldNumber;
#endif  // !_MSC_VER

ScintStep::ScintStep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ratchroma.ScintStep)
}

void ScintStep::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ScintStep::ScintStep(const ScintStep& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ratchroma.ScintStep)
}

void ScintStep::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nphotons_ = 0;
  step_start_x_ = 0;
  step_start_y_ = 0;
  step_start_z_ = 0;
  step_start_t_ = 0;
  step_end_x_ = 0;
  step_end_y_ = 0;
  step_end_z_ = 0;
  step_end_t_ = 0;
  material_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ScintStep::~ScintStep() {
  // @@protoc_insertion_point(destructor:ratchroma.ScintStep)
  SharedDtor();
}

void ScintStep::SharedDtor() {
  material_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ScintStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScintStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScintStep_descriptor_;
}

const ScintStep& ScintStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ratchromadata_2eproto();
  return *default_instance_;
}

ScintStep* ScintStep::default_instance_ = NULL;

ScintStep* ScintStep::New(::google::protobuf::Arena* arena) const {
  ScintStep* n = new ScintStep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScintStep::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ScintStep*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(nphotons_, step_end_z_);
  step_end_t_ = 0;
  material_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ScintStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ratchroma.ScintStep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nphotons = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nphotons_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_step_start_x;
        break;
      }

      // optional float step_start_x = 2;
      case 2: {
        if (tag == 21) {
         parse_step_start_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_start_x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_step_start_y;
        break;
      }

      // optional float step_start_y = 3;
      case 3: {
        if (tag == 29) {
         parse_step_start_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_start_y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_step_start_z;
        break;
      }

      // optional float step_start_z = 4;
      case 4: {
        if (tag == 37) {
         parse_step_start_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_start_z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_step_start_t;
        break;
      }

      // optional float step_start_t = 5;
      case 5: {
        if (tag == 45) {
         parse_step_start_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_start_t_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_step_end_x;
        break;
      }

      // optional float step_end_x = 6;
      case 6: {
        if (tag == 53) {
         parse_step_end_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_end_x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_step_end_y;
        break;
      }

      // optional float step_end_y = 7;
      case 7: {
        if (tag == 61) {
         parse_step_end_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_end_y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_step_end_z;
        break;
      }

      // optional float step_end_z = 8;
      case 8: {
        if (tag == 69) {
         parse_step_end_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_end_z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_step_end_t;
        break;
      }

      // optional float step_end_t = 9;
      case 9: {
        if (tag == 77) {
         parse_step_end_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_end_t_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_material;
        break;
      }

      // optional string material = 10;
      case 10: {
        if (tag == 82) {
         parse_material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_material()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->material().data(), this->material().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ratchroma.ScintStep.material");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ratchroma.ScintStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ratchroma.ScintStep)
  return false;
#undef DO_
}

void ScintStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ratchroma.ScintStep)
  // optional int32 nphotons = 1;
  if (this->nphotons() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nphotons(), output);
  }

  // optional float step_start_x = 2;
  if (this->step_start_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->step_start_x(), output);
  }

  // optional float step_start_y = 3;
  if (this->step_start_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->step_start_y(), output);
  }

  // optional float step_start_z = 4;
  if (this->step_start_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->step_start_z(), output);
  }

  // optional float step_start_t = 5;
  if (this->step_start_t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->step_start_t(), output);
  }

  // optional float step_end_x = 6;
  if (this->step_end_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->step_end_x(), output);
  }

  // optional float step_end_y = 7;
  if (this->step_end_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->step_end_y(), output);
  }

  // optional float step_end_z = 8;
  if (this->step_end_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->step_end_z(), output);
  }

  // optional float step_end_t = 9;
  if (this->step_end_t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->step_end_t(), output);
  }

  // optional string material = 10;
  if (this->material().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->material().data(), this->material().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ratchroma.ScintStep.material");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->material(), output);
  }

  // @@protoc_insertion_point(serialize_end:ratchroma.ScintStep)
}

::google::protobuf::uint8* ScintStep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ratchroma.ScintStep)
  // optional int32 nphotons = 1;
  if (this->nphotons() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nphotons(), target);
  }

  // optional float step_start_x = 2;
  if (this->step_start_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->step_start_x(), target);
  }

  // optional float step_start_y = 3;
  if (this->step_start_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->step_start_y(), target);
  }

  // optional float step_start_z = 4;
  if (this->step_start_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->step_start_z(), target);
  }

  // optional float step_start_t = 5;
  if (this->step_start_t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->step_start_t(), target);
  }

  // optional float step_end_x = 6;
  if (this->step_end_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->step_end_x(), target);
  }

  // optional float step_end_y = 7;
  if (this->step_end_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->step_end_y(), target);
  }

  // optional float step_end_z = 8;
  if (this->step_end_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->step_end_z(), target);
  }

  // optional float step_end_t = 9;
  if (this->step_end_t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->step_end_t(), target);
  }

  // optional string material = 10;
  if (this->material().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->material().data(), this->material().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ratchroma.ScintStep.material");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->material(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ratchroma.ScintStep)
  return target;
}

int ScintStep::ByteSize() const {
  int total_size = 0;

  // optional int32 nphotons = 1;
  if (this->nphotons() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nphotons());
  }

  // optional float step_start_x = 2;
  if (this->step_start_x() != 0) {
    total_size += 1 + 4;
  }

  // optional float step_start_y = 3;
  if (this->step_start_y() != 0) {
    total_size += 1 + 4;
  }

  // optional float step_start_z = 4;
  if (this->step_start_z() != 0) {
    total_size += 1 + 4;
  }

  // optional float step_start_t = 5;
  if (this->step_start_t() != 0) {
    total_size += 1 + 4;
  }

  // optional float step_end_x = 6;
  if (this->step_end_x() != 0) {
    total_size += 1 + 4;
  }

  // optional float step_end_y = 7;
  if (this->step_end_y() != 0) {
    total_size += 1 + 4;
  }

  // optional float step_end_z = 8;
  if (this->step_end_z() != 0) {
    total_size += 1 + 4;
  }

  // optional float step_end_t = 9;
  if (this->step_end_t() != 0) {
    total_size += 1 + 4;
  }

  // optional string material = 10;
  if (this->material().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->material());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScintStep::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ScintStep* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ScintStep>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScintStep::MergeFrom(const ScintStep& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.nphotons() != 0) {
    set_nphotons(from.nphotons());
  }
  if (from.step_start_x() != 0) {
    set_step_start_x(from.step_start_x());
  }
  if (from.step_start_y() != 0) {
    set_step_start_y(from.step_start_y());
  }
  if (from.step_start_z() != 0) {
    set_step_start_z(from.step_start_z());
  }
  if (from.step_start_t() != 0) {
    set_step_start_t(from.step_start_t());
  }
  if (from.step_end_x() != 0) {
    set_step_end_x(from.step_end_x());
  }
  if (from.step_end_y() != 0) {
    set_step_end_y(from.step_end_y());
  }
  if (from.step_end_z() != 0) {
    set_step_end_z(from.step_end_z());
  }
  if (from.step_end_t() != 0) {
    set_step_end_t(from.step_end_t());
  }
  if (from.material().size() > 0) {

    material_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.material_);
  }
}

void ScintStep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScintStep::CopyFrom(const ScintStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScintStep::IsInitialized() const {

  return true;
}

void ScintStep::Swap(ScintStep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScintStep::InternalSwap(ScintStep* other) {
  std::swap(nphotons_, other->nphotons_);
  std::swap(step_start_x_, other->step_start_x_);
  std::swap(step_start_y_, other->step_start_y_);
  std::swap(step_start_z_, other->step_start_z_);
  std::swap(step_start_t_, other->step_start_t_);
  std::swap(step_end_x_, other->step_end_x_);
  std::swap(step_end_y_, other->step_end_y_);
  std::swap(step_end_z_, other->step_end_z_);
  std::swap(step_end_t_, other->step_end_t_);
  material_.Swap(&other->material_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScintStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScintStep_descriptor_;
  metadata.reflection = ScintStep_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScintStep

// optional int32 nphotons = 1;
void ScintStep::clear_nphotons() {
  nphotons_ = 0;
}
 ::google::protobuf::int32 ScintStep::nphotons() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.nphotons)
  return nphotons_;
}
 void ScintStep::set_nphotons(::google::protobuf::int32 value) {
  
  nphotons_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.nphotons)
}

// optional float step_start_x = 2;
void ScintStep::clear_step_start_x() {
  step_start_x_ = 0;
}
 float ScintStep::step_start_x() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.step_start_x)
  return step_start_x_;
}
 void ScintStep::set_step_start_x(float value) {
  
  step_start_x_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.step_start_x)
}

// optional float step_start_y = 3;
void ScintStep::clear_step_start_y() {
  step_start_y_ = 0;
}
 float ScintStep::step_start_y() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.step_start_y)
  return step_start_y_;
}
 void ScintStep::set_step_start_y(float value) {
  
  step_start_y_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.step_start_y)
}

// optional float step_start_z = 4;
void ScintStep::clear_step_start_z() {
  step_start_z_ = 0;
}
 float ScintStep::step_start_z() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.step_start_z)
  return step_start_z_;
}
 void ScintStep::set_step_start_z(float value) {
  
  step_start_z_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.step_start_z)
}

// optional float step_start_t = 5;
void ScintStep::clear_step_start_t() {
  step_start_t_ = 0;
}
 float ScintStep::step_start_t() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.step_start_t)
  return step_start_t_;
}
 void ScintStep::set_step_start_t(float value) {
  
  step_start_t_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.step_start_t)
}

// optional float step_end_x = 6;
void ScintStep::clear_step_end_x() {
  step_end_x_ = 0;
}
 float ScintStep::step_end_x() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.step_end_x)
  return step_end_x_;
}
 void ScintStep::set_step_end_x(float value) {
  
  step_end_x_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.step_end_x)
}

// optional float step_end_y = 7;
void ScintStep::clear_step_end_y() {
  step_end_y_ = 0;
}
 float ScintStep::step_end_y() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.step_end_y)
  return step_end_y_;
}
 void ScintStep::set_step_end_y(float value) {
  
  step_end_y_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.step_end_y)
}

// optional float step_end_z = 8;
void ScintStep::clear_step_end_z() {
  step_end_z_ = 0;
}
 float ScintStep::step_end_z() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.step_end_z)
  return step_end_z_;
}
 void ScintStep::set_step_end_z(float value) {
  
  step_end_z_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.step_end_z)
}

// optional float step_end_t = 9;
void ScintStep::clear_step_end_t() {
  step_end_t_ = 0;
}
 float ScintStep::step_end_t() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.step_end_t)
  return step_end_t_;
}
 void ScintStep::set_step_end_t(float value) {
  
  step_end_t_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.step_end_t)
}

// optional string material = 10;
void ScintStep::clear_material() {
  material_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ScintStep::material() const {
  // @@protoc_insertion_point(field_get:ratchroma.ScintStep.material)
  return material_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScintStep::set_material(const ::std::string& value) {
  
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ratchroma.ScintStep.material)
}
 void ScintStep::set_material(const char* value) {
  
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ratchroma.ScintStep.material)
}
 void ScintStep::set_material(const char* value, size_t size) {
  
  material_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ratchroma.ScintStep.material)
}
 ::std::string* ScintStep::mutable_material() {
  
  // @@protoc_insertion_point(field_mutable:ratchroma.ScintStep.material)
  return material_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ScintStep::release_material() {
  
  return material_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ScintStep::set_allocated_material(::std::string* material) {
  if (material != NULL) {
    
  } else {
    
  }
  material_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), material);
  // @@protoc_insertion_point(field_set_allocated:ratchroma.ScintStep.material)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ChromaData::kEventidFieldNumber;
const int ChromaData::kCherekovphotonsFieldNumber;
const int ChromaData::kStepdataFieldNumber;
#endif  // !_MSC_VER

ChromaData::ChromaData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ratchroma.ChromaData)
}

void ChromaData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  cherekovphotons_ = const_cast< ::ratchroma::CherenkovData*>(&::ratchroma::CherenkovData::default_instance());
}

ChromaData::ChromaData(const ChromaData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ratchroma.ChromaData)
}

void ChromaData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  eventid_ = 0;
  cherekovphotons_ = NULL;
}

ChromaData::~ChromaData() {
  // @@protoc_insertion_point(destructor:ratchroma.ChromaData)
  SharedDtor();
}

void ChromaData::SharedDtor() {
  if (this != default_instance_) {
    delete cherekovphotons_;
  }
}

void ChromaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChromaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChromaData_descriptor_;
}

const ChromaData& ChromaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ratchromadata_2eproto();
  return *default_instance_;
}

ChromaData* ChromaData::default_instance_ = NULL;

ChromaData* ChromaData::New(::google::protobuf::Arena* arena) const {
  ChromaData* n = new ChromaData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChromaData::Clear() {
  eventid_ = 0;
  if (GetArenaNoVirtual() == NULL && cherekovphotons_ != NULL) delete cherekovphotons_;
  cherekovphotons_ = NULL;
  stepdata_.Clear();
}

bool ChromaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ratchroma.ChromaData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eventid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cherekovphotons;
        break;
      }

      // optional .ratchroma.CherenkovData cherekovphotons = 2;
      case 2: {
        if (tag == 18) {
         parse_cherekovphotons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cherekovphotons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stepdata;
        break;
      }

      // repeated .ratchroma.ScintStep stepdata = 3;
      case 3: {
        if (tag == 26) {
         parse_stepdata:
          DO_(input->IncrementRecursionDepth());
         parse_loop_stepdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stepdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_stepdata;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ratchroma.ChromaData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ratchroma.ChromaData)
  return false;
#undef DO_
}

void ChromaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ratchroma.ChromaData)
  // optional int32 eventid = 1;
  if (this->eventid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eventid(), output);
  }

  // optional .ratchroma.CherenkovData cherekovphotons = 2;
  if (this->has_cherekovphotons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cherekovphotons_, output);
  }

  // repeated .ratchroma.ScintStep stepdata = 3;
  for (unsigned int i = 0, n = this->stepdata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stepdata(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ratchroma.ChromaData)
}

::google::protobuf::uint8* ChromaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ratchroma.ChromaData)
  // optional int32 eventid = 1;
  if (this->eventid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eventid(), target);
  }

  // optional .ratchroma.CherenkovData cherekovphotons = 2;
  if (this->has_cherekovphotons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->cherekovphotons_, target);
  }

  // repeated .ratchroma.ScintStep stepdata = 3;
  for (unsigned int i = 0, n = this->stepdata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stepdata(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ratchroma.ChromaData)
  return target;
}

int ChromaData::ByteSize() const {
  int total_size = 0;

  // optional int32 eventid = 1;
  if (this->eventid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eventid());
  }

  // optional .ratchroma.CherenkovData cherekovphotons = 2;
  if (this->has_cherekovphotons()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cherekovphotons_);
  }

  // repeated .ratchroma.ScintStep stepdata = 3;
  total_size += 1 * this->stepdata_size();
  for (int i = 0; i < this->stepdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stepdata(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChromaData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChromaData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChromaData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChromaData::MergeFrom(const ChromaData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  stepdata_.MergeFrom(from.stepdata_);
  if (from.eventid() != 0) {
    set_eventid(from.eventid());
  }
  if (from.has_cherekovphotons()) {
    mutable_cherekovphotons()->::ratchroma::CherenkovData::MergeFrom(from.cherekovphotons());
  }
}

void ChromaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChromaData::CopyFrom(const ChromaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromaData::IsInitialized() const {

  return true;
}

void ChromaData::Swap(ChromaData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChromaData::InternalSwap(ChromaData* other) {
  std::swap(eventid_, other->eventid_);
  std::swap(cherekovphotons_, other->cherekovphotons_);
  stepdata_.UnsafeArenaSwap(&other->stepdata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChromaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChromaData_descriptor_;
  metadata.reflection = ChromaData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChromaData

// optional int32 eventid = 1;
void ChromaData::clear_eventid() {
  eventid_ = 0;
}
 ::google::protobuf::int32 ChromaData::eventid() const {
  // @@protoc_insertion_point(field_get:ratchroma.ChromaData.eventid)
  return eventid_;
}
 void ChromaData::set_eventid(::google::protobuf::int32 value) {
  
  eventid_ = value;
  // @@protoc_insertion_point(field_set:ratchroma.ChromaData.eventid)
}

// optional .ratchroma.CherenkovData cherekovphotons = 2;
bool ChromaData::has_cherekovphotons() const {
  return !_is_default_instance_ && cherekovphotons_ != NULL;
}
void ChromaData::clear_cherekovphotons() {
  if (GetArenaNoVirtual() == NULL && cherekovphotons_ != NULL) delete cherekovphotons_;
  cherekovphotons_ = NULL;
}
 const ::ratchroma::CherenkovData& ChromaData::cherekovphotons() const {
  // @@protoc_insertion_point(field_get:ratchroma.ChromaData.cherekovphotons)
  return cherekovphotons_ != NULL ? *cherekovphotons_ : *default_instance_->cherekovphotons_;
}
 ::ratchroma::CherenkovData* ChromaData::mutable_cherekovphotons() {
  
  if (cherekovphotons_ == NULL) {
    cherekovphotons_ = new ::ratchroma::CherenkovData;
  }
  // @@protoc_insertion_point(field_mutable:ratchroma.ChromaData.cherekovphotons)
  return cherekovphotons_;
}
 ::ratchroma::CherenkovData* ChromaData::release_cherekovphotons() {
  
  ::ratchroma::CherenkovData* temp = cherekovphotons_;
  cherekovphotons_ = NULL;
  return temp;
}
 void ChromaData::set_allocated_cherekovphotons(::ratchroma::CherenkovData* cherekovphotons) {
  delete cherekovphotons_;
  cherekovphotons_ = cherekovphotons;
  if (cherekovphotons) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ratchroma.ChromaData.cherekovphotons)
}

// repeated .ratchroma.ScintStep stepdata = 3;
int ChromaData::stepdata_size() const {
  return stepdata_.size();
}
void ChromaData::clear_stepdata() {
  stepdata_.Clear();
}
 const ::ratchroma::ScintStep& ChromaData::stepdata(int index) const {
  // @@protoc_insertion_point(field_get:ratchroma.ChromaData.stepdata)
  return stepdata_.Get(index);
}
 ::ratchroma::ScintStep* ChromaData::mutable_stepdata(int index) {
  // @@protoc_insertion_point(field_mutable:ratchroma.ChromaData.stepdata)
  return stepdata_.Mutable(index);
}
 ::ratchroma::ScintStep* ChromaData::add_stepdata() {
  // @@protoc_insertion_point(field_add:ratchroma.ChromaData.stepdata)
  return stepdata_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::ratchroma::ScintStep >&
ChromaData::stepdata() const {
  // @@protoc_insertion_point(field_list:ratchroma.ChromaData.stepdata)
  return stepdata_;
}
 ::google::protobuf::RepeatedPtrField< ::ratchroma::ScintStep >*
ChromaData::mutable_stepdata() {
  // @@protoc_insertion_point(field_mutable_list:ratchroma.ChromaData.stepdata)
  return &stepdata_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ratchroma

// @@protoc_insertion_point(global_scope)
